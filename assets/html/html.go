// Code generated by go-bindata.
// sources:
// templates/html/inventory.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInventoryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xdd\x6e\xe3\x46\x0f\xbd\x8e\x9f\x82\x9f\xbe\xbd\xd8\x05\x2a\x29\x9b\x62\xd3\xc6\x91\x05\x04\xd9\x5d\x34\x40\xff\xd0\x24\x40\x7b\x55\x50\x1a\xda\x62\x3b\x9a\x51\x66\x28\x7b\x9d\x34\xef\x5e\xcc\xc8\x3f\x4a\xe2\x14\xad\x6f\x24\x6a\x0e\x0f\x39\x24\x0f\xe1\xe2\x7f\x1f\x7f\xba\xbc\xf9\xed\xe7\x4f\xd0\x48\xab\xcb\x49\x11\x1e\xa0\xd1\x2c\x66\x09\x99\xa4\x9c\x00\x14\x0d\xa1\x0a\x2f\x00\x85\xb0\x68\x2a\x1f\x1e\x20\xfb\xc8\x5e\x1c\x57\xbd\xb0\x35\x3f\x62\x4b\xf0\xf8\x08\xe1\xfb\xcd\xba\x8b\xef\x57\x66\x49\x46\xac\x5b\x17\xf9\xe0\x34\x10\xb4\x24\x08\x8d\x48\x97\xd2\x5d\xcf\xcb\x59\x72\x69\x8d\x90\x91\x34\xf8\x25\x50\x0f\xd6\x2c\x11\xfa\x22\x79\xc8\xe5\x1c\xea\x06\x9d\x27\x99\xdd\xde\x7c\x4e\xbf\x4d\xc6\x3c\x06\x5b\x9a\x25\x8e\xe6\xe4\x1c\xb9\x91\xb7\x75\xbc\x60\x93\xbc\x16\xf3\xd7\xf4\xf6\x22\xbd\xb4\x6d\x87\xc2\x95\x1e\x87\xbd\xfa\x34\x3b\x4b\x20\x7f\x19\x04\xbb\x4e\x53\xda\xda\x8a\x35\xa5\x2b\xaa\x52\xec\xba\xb4\xc6\x0e\x9f\xfa\xaf\xc9\xff\x7b\x77\x2f\x28\xbd\x4f\x2b\x74\xa9\x97\xf5\x13\x9e\x4a\x63\xfd\xe7\x41\xa6\xef\xd0\xa8\x86\xb4\xfa\xec\x98\x8c\xd2\xeb\x71\xcd\x5c\x4f\x07\x7d\x96\x4c\xab\xce\x3a\x19\x61\x57\xac\xa4\x99\x29\x5a\x72\x4d\x69\x34\xf6\x9e\x31\x19\x90\x75\x47\x9b\x3e\xd4\xde\x6f\x6a\x09\x50\x59\xb5\x86\x87\x8d\x31\xb7\x46\xd2\x39\xb6\xac\xd7\x53\xf0\x68\x7c\xea\xc9\xf1\xfc\x7c\x73\xac\xd9\x50\xda\x10\x2f\x1a\x99\xc2\xfb\xec\x6b\x6a\xb7\x27\x8f\x93\x1d\x64\x47\xd6\xa2\x5b\xb0\x49\x2b\x2b\x62\xdb\x80\xff\x70\x00\x5f\x5b\x45\x4f\xc3\xaf\x36\xfc\xdf\x1c\x1f\x9f\xef\x40\xda\xba\x29\xfc\xff\xec\xec\xec\x05\x41\xa6\x48\x90\xb5\x7f\x1e\x56\x6c\x37\x85\x83\x21\x33\xdf\xe0\xc9\x87\xd3\x9d\xc3\x96\xfd\xf4\xf4\x74\x8f\x8d\x85\xcb\x63\xe5\xa2\x66\xf2\xad\x68\x8a\x50\xb0\x72\xcb\x15\xd4\x74\xf2\x5f\xf5\xd3\x9c\x94\x93\xc9\x51\xd1\x95\x37\x0d\x7b\x98\xb3\x26\x58\xa1\x87\x02\xa1\x71\x34\x9f\x25\x61\xb4\xfd\x34\xcf\x17\x2c\x4d\x5f\x65\xb5\x6d\xf3\x55\x63\xbd\x35\x73\x76\x5e\xf2\x85\x4d\x47\x66\xaa\xd8\x4b\xda\xf5\x95\x66\xdf\x24\xe5\x82\x0c\x39\x14\x52\x50\xad\xc1\xd9\xca\x8a\x2f\x72\x2c\xc1\x1a\x28\x62\xad\x6b\x8d\xde\xcf\x12\x85\x42\xc9\x90\x38\x4a\x48\xb0\xc8\xc3\x71\x99\xc1\x4d\x43\x8e\x80\x3d\xa0\xf6\x16\x10\x5a\xac\x9b\xd0\x77\x47\xa8\x82\x3a\x60\x49\xce\xb3\x35\x80\x4b\x64\x1d\xbf\xa0\xec\x93\xe7\xed\x3d\xb3\x3f\xbc\x35\x49\xf9\xd4\x8e\xb9\xa0\x87\x15\x69\x0d\xe3\x3b\xa3\xd8\x36\xfb\xd2\xea\xa4\xbc\x10\xdb\xc2\xfb\xec\x78\x80\x1a\xb5\xc7\x38\xef\x07\xc8\x2f\xd7\xd7\x70\xb2\x41\xcc\x89\x94\xcf\xe0\xc2\x83\x9d\x83\x84\x82\xae\x1c\x0b\x9b\x05\x14\x77\x25\x6a\x29\xf2\xbb\x12\xde\x5a\xb7\x31\xc9\x19\x14\x5e\x52\xf8\xfc\x2e\xd6\xde\x03\x3a\x02\x63\x05\xd8\xd4\xba\x57\xa4\x80\x0d\xa0\x59\x0f\x84\x04\x6a\xd4\x59\x9f\x15\x79\x57\x4e\x8e\x26\x47\x45\xaf\x43\x17\x21\x34\xd9\xa1\x59\x10\xbc\xe1\xaf\xe0\x0d\x0b\x4c\x67\x90\x5d\x09\xb5\x1e\x1e\x1f\x03\x20\xfc\xc2\xb3\xd8\xca\xf7\xe1\x21\xe0\xb2\xcd\x94\x24\x65\xb8\x47\x04\x68\x06\x56\x2f\xcf\x07\x92\xc2\x8b\xb3\x66\x51\xee\xca\x31\x82\x85\xdd\xe7\xc8\x7b\x52\xd1\xe1\xb5\x93\x10\x28\x0c\x75\xe4\x81\xc2\xb7\xa8\xf5\x76\x20\x06\x51\xec\x7c\xaf\xa3\xf9\xcc\x3b\x3a\x94\x45\xe5\xc2\x6a\x19\x92\x52\xbc\xdc\x8d\xd4\x20\xc4\x6d\xbe\x00\x71\xbc\xc7\xd5\x8b\xeb\x0a\xd9\xf8\xa7\xb3\x58\xdb\xde\xc8\x2e\xf2\x65\xb0\xe0\x2f\x68\xfa\x16\x0d\xdf\xd3\xef\xb5\x6d\x5b\xdc\x4f\x68\x28\xf8\x9b\x83\x72\x73\x54\x5b\xa7\x7c\x1c\x1a\x7e\x16\xc3\xf3\x3d\xed\x2f\xc7\xf7\xe3\xc2\x8c\x62\x55\x6b\x21\x3f\x8a\x55\xef\x51\x71\x14\xff\x91\xf2\x05\xd1\x9e\xa7\x37\x7b\xa6\x6c\x5c\x40\x80\x2b\x89\xea\xaf\x1d\x45\xd9\x1e\x56\x69\x08\xf1\x3d\x7a\xf9\xc1\x2a\x9e\xf3\xa6\x1d\x03\x75\xc8\xeb\x6d\x9c\x53\x14\x04\x16\x4f\x7a\xfe\x2e\x52\x6a\xf4\x02\x7d\xa7\x22\xef\xab\x0b\x60\x4b\x7d\x1b\x81\xa3\x4d\xb0\xe9\x70\xae\x78\x19\x16\x5f\x18\xd0\x5c\x73\xcc\x7b\x33\xf7\x64\x42\x22\xfb\x55\x98\x07\x4d\x1c\xc5\x75\x39\x6c\xc9\x22\x1f\xfe\x85\xfc\x1d\x00\x00\xff\xff\xbf\xcd\x56\x63\x96\x08\x00\x00")

func templatesHtmlInventoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInventoryHtml,
		"templates/html/inventory.html",
	)
}

func templatesHtmlInventoryHtml() (*asset, error) {
	bytes, err := templatesHtmlInventoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inventory.html", size: 2198, mode: os.FileMode(420), modTime: time.Unix(1560185831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inventory.html": templatesHtmlInventoryHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inventory.html": &bintree{templatesHtmlInventoryHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

